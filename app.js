const { useState, useEffect } = React;

function Header({ account, isVerified }) {
  return (
    <header>
      <h1>üéÆ Somnia Card Game</h1>
      {account && (
        <div className="wallet-info">
          <span className="wallet-address">
            {account.slice(0, 6)}...{account.slice(-4)}
          </span>
          {isVerified && <span className="verified-badge">Verified</span>}
        </div>
      )}
    </header>
  );
}

function NetworkAlert() {
  return (
    <div className="network-alert">
      ‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Somnia Testnet (ChainID: 0xc488)
    </div>
  );
}

function VerificationMessage() {
  return (
    <div className="verification-message">
      <h3>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞</h3>
      <p>–ü–æ–¥–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MetaMask –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º.</p>
      <ul>
        <li>–ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≥–∞–∑</li>
        <li>–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã</li>
        <li>–î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ STT</li>
      </ul>
    </div>
  );
}

function MintStatus({ hasMinted, isMinting, onMint, type }) {
  const messages = {
    NFT: {
      minted: "NFT —É–∂–µ –∑–∞–º–∏–Ω—á–µ–Ω–∞",
      notMinted: "–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∑–∞–º–∏–Ω—Ç–∏—Ç—å NFT",
      minting: "–ú–∏–Ω—Ç–∏–Ω–≥ NFT..."
    },
    USDCard: {
      minted: "USDCard —É–∂–µ –∑–∞–º–∏–Ω—á–µ–Ω—ã",
      notMinted: "–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∑–∞–º–∏–Ω—Ç–∏—Ç—å 10,000 USDCard",
      minting: "–ú–∏–Ω—Ç–∏–Ω–≥ USDCard..."
    }
  };

  return (
    <div className="mint-status">
      <button 
        className={`action-btn ${hasMinted ? 'minted' : ''}`}
        onClick={onMint}
        disabled={isMinting || hasMinted}
      >
        {isMinting ? messages[type].minting : 
         hasMinted ? messages[type].minted : messages[type].notMinted}
      </button>
    </div>
  );
}

function App() {
  const [account, setAccount] = useState('');
  const [isCorrectNetwork, setIsCorrectNetwork] = useState(false);
  const [isVerified, setIsVerified] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasNFT, setHasNFT] = useState(false);
  const [hasUSDCard, setHasUSDCard] = useState(false);
  const [isMintingNFT, setIsMintingNFT] = useState(false);
  const [isMintingUSDCard, setIsMintingUSDCard] = useState(false);

  // –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const NFT_CONTRACT_ADDRESS = "0x6C6506d9587e3EA5bbfD8278bF0c237dd64eD641";
  const USDCARD_CONTRACT_ADDRESS = "0x14A21748e5E9Da6B0d413256E3ae80ABEBd8CC80";

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
  const connectContracts = async () => {
    if (!window.ethereum) return;

    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ABI
    const nftAbi = await fetch('./abi/NFT.json').then(res => res.json());
    const usdcardAbi = await fetch('./abi/USDCard.json').then(res => res.json());

    const nftContract = new ethers.Contract(NFT_CONTRACT_ADDRESS, nftAbi.abi, signer);
    const usdcardContract = new ethers.Contract(USDCARD_CONTRACT_ADDRESS, usdcardAbi.abi, signer);

    return { nftContract, usdcardContract };
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è NFT –∏ USDCard
  const checkUserAssets = async () => {
    if (!account) return;

    try {
      const { nftContract, usdcardContract } = await connectContracts();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT
      const nftBalance = await nftContract.balanceOf(account);
      setHasNFT(nftBalance.gt(0));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º USDCard
      const hasMintedUSDCard = await usdcardContract.hasMinted(account);
      setHasUSDCard(hasMintedUSDCard);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–æ–≤:", error);
    }
  };

  // –ú–∏–Ω—Ç–∏–º NFT
  const mintNFT = async () => {
    setIsMintingNFT(true);
    try {
      const { nftContract } = await connectContracts();
      const tx = await nftContract.mint();
      await tx.wait();
      setHasNFT(true);
      alert("NFT —É—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω–∞!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–µ NFT:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–µ NFT: " + error.message);
    } finally {
      setIsMintingNFT(false);
    }
  };

  // –ú–∏–Ω—Ç–∏–º USDCard
  const mintUSDCard = async () => {
    setIsMintingUSDCard(true);
    try {
      const { usdcardContract } = await connectContracts();
      const tx = await usdcardContract.mint();
      await tx.wait();
      setHasUSDCard(true);
      alert("10,000 USDCard —É—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω—ã!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–µ USDCard:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–µ USDCard: " + error.message);
    } finally {
      setIsMintingUSDCard(false);
    }
  };

  const checkNetwork = async () => {
    if (window.ethereum) {
      const chainId = await window.ethereum.request({ method: 'eth_chainId' });
      setIsCorrectNetwork(chainId === '0xc488');
    }
  };

  const verifyWallet = async () => {
    if (!account) return;
    
    setIsLoading(true);
    
    try {
      const message = `–ü–æ–¥–ø–∏—à–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º.\n\n` +
        `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∑–∞ –≥–∞–∑ –∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤.\n` +
        `–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Å–∞–π—Ç) –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n` +
        `–¢–∞–∫–∂–µ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ (STT), –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è Somnia Testnet.\n\n` +
        `–ö–æ—à–µ–ª–µ–∫: ${account}\n` +
        `Nonce: ${Math.floor(Math.random() * 10000)}`;
      
      await window.ethereum.request({
        method: 'personal_sign',
        params: [message, account]
      });
      
      setIsVerified(true);
      await checkUserAssets();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      alert('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const connectWallet = async () => {
    try {
      if (!window.ethereum) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ MetaMask');
        return;
      }

      const accounts = await window.ethereum.request({ 
        method: 'eth_requestAccounts' 
      });
      
      setAccount(accounts[0]);
      await checkNetwork();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: ${error.message}`);
    }
  };

  useEffect(() => {
    if (window.ethereum) {
      window.ethereum.on('accountsChanged', (accounts) => {
        setAccount(accounts[0] || '');
        setIsVerified(false);
        setHasNFT(false);
        setHasUSDCard(false);
      });
      
      window.ethereum.on('chainChanged', () => {
        window.location.reload();
      });

      if (account && isVerified) {
        checkUserAssets();
      }
    }
  }, [account, isVerified]);

  return (
    <div className="app-container">
      <Header account={account} isVerified={isVerified} />
      
      {!isCorrectNetwork && <NetworkAlert />}
      
      <div className="main-content">
        {!account ? (
          <div className="connect-section">
            <button className="connect-btn" onClick={connectWallet}>
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask
            </button>
            <VerificationMessage />
          </div>
        ) : !isVerified ? (
          <div className="verification-section">
            <VerificationMessage />
            <button 
              className="verify-btn" 
              onClick={verifyWallet}
              disabled={isLoading}
            >
              {isLoading ? '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'}
            </button>
          </div>
        ) : (
          <div className="game-section">
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Somnia Card Game</h2>
            <div className="action-buttons">
              <MintStatus 
                hasMinted={hasNFT}
                isMinting={isMintingNFT}
                onMint={mintNFT}
                type="NFT"
              />
              <MintStatus 
                hasMinted={hasUSDCard}
                isMinting={isMintingUSDCard}
                onMint={mintUSDCard}
                type="USDCard"
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);