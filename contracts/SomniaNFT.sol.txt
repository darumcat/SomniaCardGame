 SPDX-License-Identifier MIT
pragma solidity ^0.8.29;

import @openzeppelincontractstokenERC721ERC721.sol;
import @openzeppelincontractsaccessOwnable.sol;
import @openzeppelincontractsutilsCounters.sol;

contract SomniaNFT is ERC721, Ownable {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdCounter;
    string private _baseTokenURI;
    mapping(address = bool) public hasMinted;

    event Minted(address indexed to, uint256 tokenId);

    constructor() ERC721(SomniaGuard, SG) Ownable(msg.sender) {
        _baseTokenURI = httpspink-defiant-koi-687.mypinata.cloudipfsbafybeie32zqjhgseqju5rmnex257izlkh746h6g3je6rrq7644mkyg6swa;
    }

     Основная функция минта (игрок платит газ)
    function mint() external {
        require(!hasMinted[msg.sender], Already minted);
        hasMinted[msg.sender] = true;
        
        uint256 tokenId = _tokenIdCounter.current();
        _safeMint(msg.sender, tokenId);
        _tokenIdCounter.increment();
        
        emit Minted(msg.sender, tokenId);
    }

     Для админа минтинг конкретному адресу (если игрок не может сам)
    function adminMint(address to) external onlyOwner {
        require(!hasMinted[to], Already minted);
        hasMinted[to] = true;
        
        uint256 tokenId = _tokenIdCounter.current();
        _safeMint(to, tokenId);
        _tokenIdCounter.increment();
        
        emit Minted(to, tokenId);
    }

     Для массового добавления тестовых пользователей
    function adminMintBatch(address[] calldata recipients) external onlyOwner {
        for (uint i = 0; i  recipients.length; i++) {
            if (!hasMinted[recipients[i]]) {
                hasMinted[recipients[i]] = true;
                _safeMint(recipients[i], _tokenIdCounter.current());
                _tokenIdCounter.increment();
            }
        }
    }

    function tokenURI(uint256) public view override returns (string memory) {
        return string(abi.encodePacked(
            'dataapplicationjson;utf8,',
            '{nameSomniaGuard,',
            'descriptionAnti-bot NFT for Somnia Game,',
            'image', _baseTokenURI, ',',
            'animation_url', _baseTokenURI, '}'
        ));
    }

    function setBaseURI(string memory newURI) external onlyOwner {
        _baseTokenURI = newURI;
    }

    function totalSupply() public view returns (uint256) {
        return _tokenIdCounter.current();
    }
}